<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.ujigu.secure.sys.dao.LinkDao" >
  <resultMap id="BaseResultMap" type="com.ujigu.secure.sys.entity.Link" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="name" property="name" jdbcType="VARCHAR" />
    <result column="code" property="code" jdbcType="VARCHAR" />
    <result column="link" property="link" jdbcType="VARCHAR" />
    <result column="project_name" property="projectName" jdbcType="VARCHAR" />
    <result column="order_rank" property="orderRank" jdbcType="INTEGER" />
    <result column="is_share" property="isShare" jdbcType="TINYINT" />
    <result column="need_data_check" property="needDataCheck" jdbcType="TINYINT" />
    <result column="type" property="type" jdbcType="TINYINT" />
    <result column="parent_id" property="parentId" jdbcType="INTEGER" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="last_uptime" property="lastUptime" jdbcType="TIMESTAMP" />
    <result column="remark" property="remark" jdbcType="VARCHAR" />
    <result column="state" property="state" jdbcType="TINYINT" />
  </resultMap>
  <sql id="BaseColumnList" >
    id, name, code, link, project_name, order_rank, is_share, need_data_check, type, 
    parent_id, create_time, last_uptime, remark, state
  </sql>
  <select id="findByPK" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="BaseColumnList" />
    from link
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPK" parameterType="java.lang.Integer" >
    delete from link
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.ujigu.secure.sys.entity.Link" >
    insert into link (id, name, code, 
      link, project_name, order_rank, 
      is_share, need_data_check, type, 
      parent_id, create_time, last_uptime, 
      remark, state)
    values (#{id,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR}, #{code,jdbcType=VARCHAR}, 
      #{link,jdbcType=VARCHAR}, #{projectName,jdbcType=VARCHAR}, #{orderRank,jdbcType=INTEGER}, 
      #{isShare,jdbcType=TINYINT}, #{needDataCheck,jdbcType=TINYINT}, #{type,jdbcType=TINYINT}, 
      #{parentId,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP}, #{lastUptime,jdbcType=TIMESTAMP}, 
      #{remark,jdbcType=VARCHAR}, #{state,jdbcType=TINYINT})
  </insert>
  <update id="updateByPK" parameterType="com.ujigu.secure.sys.entity.Link" >
    update link
    <set >
      <if test="name != null" >
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="code != null" >
        code = #{code,jdbcType=VARCHAR},
      </if>
      <if test="link != null" >
        link = #{link,jdbcType=VARCHAR},
      </if>
      <if test="projectName != null" >
        project_name = #{projectName,jdbcType=VARCHAR},
      </if>
      <if test="orderRank != null" >
        order_rank = #{orderRank,jdbcType=INTEGER},
      </if>
      <if test="isShare != null" >
        is_share = #{isShare,jdbcType=TINYINT},
      </if>
      <if test="needDataCheck != null" >
        need_data_check = #{needDataCheck,jdbcType=TINYINT},
      </if>
      <if test="type != null" >
        type = #{type,jdbcType=TINYINT},
      </if>
      <if test="parentId != null" >
        parent_id = #{parentId,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="lastUptime != null" >
        last_uptime = #{lastUptime,jdbcType=TIMESTAMP},
      </if>
      <if test="remark != null" >
        remark = #{remark,jdbcType=VARCHAR},
      </if>
      <if test="state != null" >
        state = #{state,jdbcType=TINYINT},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <insert id="insertReturnPK" useGeneratedKeys="true" keyProperty="id" parameterType="com.ujigu.secure.sys.entity.Link" >
    insert into link (id, name, code, 
      link, project_name, order_rank, 
      is_share, need_data_check, type, 
      parent_id, create_time, last_uptime, 
      remark, state)
    values (#{id,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR}, #{code,jdbcType=VARCHAR}, 
      #{link,jdbcType=VARCHAR}, #{projectName,jdbcType=VARCHAR}, #{orderRank,jdbcType=INTEGER}, 
      #{isShare,jdbcType=TINYINT}, #{needDataCheck,jdbcType=TINYINT}, #{type,jdbcType=TINYINT}, 
      #{parentId,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP}, #{lastUptime,jdbcType=TIMESTAMP}, 
      #{remark,jdbcType=VARCHAR}, #{state,jdbcType=TINYINT})
  </insert>
  <insert id="insertBatch" parameterType="java.util.List" >
    insert into link
		(id,name,code,link,project_name,order_rank,is_share,need_data_check,type,parent_id,create_time,last_uptime,remark,state)
	values 
	<foreach collection="list" item="item" separator="," index="index">
		(#{item.id,jdbcType=INTEGER},#{item.name,jdbcType=VARCHAR},#{item.code,jdbcType=VARCHAR},#{item.link,jdbcType=VARCHAR},#{item.projectName,jdbcType=VARCHAR},#{item.orderRank,jdbcType=INTEGER},#{item.isShare,jdbcType=TINYINT},#{item.needDataCheck,jdbcType=TINYINT},#{item.type,jdbcType=TINYINT},#{item.parentId,jdbcType=INTEGER},#{item.createTime,jdbcType=TIMESTAMP},#{item.lastUptime,jdbcType=TIMESTAMP},#{item.remark,jdbcType=VARCHAR},#{item.state,jdbcType=TINYINT})
	</foreach>
  </insert>
  <select id="getCntByPage" resultType="java.lang.Integer" >
    select 
		count(1)
	from
		link
	<include refid="pageCondition" />
  </select>
  <select id="findAll" resultMap="BaseResultMap" >
    select
		<include refid="BaseColumnList"/>
	from link
		<if test="orderBySql != null">
			${orderBySql}
		</if>
  </select>
  <select id="findByEntity" resultMap="BaseResultMap" >
    select
		<include refid="BaseColumnList"/>
	from link
	<where>
		<trim suffixOverrides="and" >
			<if test="entity.id != null" >
				and id = #{entity.id,jdbcType=INTEGER}
			</if>
			<if test="entity.name != null" >
				and name = #{entity.name,jdbcType=VARCHAR}
			</if>
			<if test="entity.code != null" >
				and code = #{entity.code,jdbcType=VARCHAR}
			</if>
			<if test="entity.link != null" >
				and link = #{entity.link,jdbcType=VARCHAR}
			</if>
			<if test="entity.projectName != null" >
				and project_name = #{entity.projectName,jdbcType=VARCHAR}
			</if>
			<if test="entity.orderRank != null" >
				and order_rank = #{entity.orderRank,jdbcType=INTEGER}
			</if>
			<if test="entity.isShare != null" >
				and is_share = #{entity.isShare,jdbcType=TINYINT}
			</if>
			<if test="entity.needDataCheck != null" >
				and need_data_check = #{entity.needDataCheck,jdbcType=TINYINT}
			</if>
			<if test="entity.type != null" >
				and type = #{entity.type,jdbcType=TINYINT}
			</if>
			<if test="entity.parentId != null" >
				and parent_id = #{entity.parentId,jdbcType=INTEGER}
			</if>
			<if test="entity.state != null" >
				and state = #{entity.state,jdbcType=TINYINT}
			</if>
		</trim>
	</where>
		<if test="orderBySql != null">
			${orderBySql}
		</if>
  </select>
  <select id="findByPage" resultMap="BaseResultMap" >
    select
		<include refid="BaseColumnList"/>
	from link
		<include refid="pageCondition"/>
		<if test="pageInfo != null and pageInfo.orderBySql != null">
			${pageInfo.orderBySql}
		</if>
		<if test="pageInfo !=null">
			limit ${pageInfo.startIndex}, ${pageInfo.pagesize}
		</if>
  </select>
  <sql id="pageCondition" >
    <where >
      <trim suffixOverrides="and" >
        <if test="entity != null" >
          		<!-- 写where的判断条件,下边是样例
			<if test="entity.nick != null">
				and nick = #{entity.nick,jdbcType=VARCHAR}
			</if>
			<if test="entity.company != null">
				and company = '${entity.nick}'
			</if>
		-->
        </if>
        <if test="dynamicSql != null">
			and ${dynamicSql}
		</if>
      </trim>
    </where>
  </sql>
  
  <select id="findRootLinks" parameterType="com.ujigu.secure.sys.entity.Link" resultMap="BaseResultMap" >
     select 
       <include refid="BaseColumnList"/>
	from link
	where <!-- project_name = #{projectName, jdbcType=VARCHAR}
	    and  -->
	      type =  #{type,jdbcType=TINYINT}
	    and
	      (parent_id is null or parent_id = 0)
	    and 
	      state = 0
	order by order_rank desc
  </select>
  
  <select id="findLinksByProjectName" parameterType="com.ujigu.secure.sys.entity.Link" resultMap="BaseResultMap" >
     select 
       <include refid="BaseColumnList"/>
	from link
	where <!-- project_name = #{projectName, jdbcType=VARCHAR}
	    and --> 
	      type =  #{type,jdbcType=TINYINT}
	    and 
	      state = 0
	order by order_rank desc
  </select>
  <select id="loadForProject" parameterType="java.lang.String" resultMap="BaseResultMap">
     select 
       <include refid="BaseColumnList"/>
	 from link
	 where<!--  (project_name = #{projectName, jdbcType=VARCHAR}
	    or 
	       is_share = 1)
	    and  -->
	       state = 0
	 order by order_rank desc
  </select>
  <update id="updateSharable" parameterType="java.util.Map">
    update link set is_share = #{isShare,jdbcType=TINYINT} 
    where id in 
     (<foreach collection="linkIds" item="linkId" separator="," index="index">
		#{linkId,jdbcType=INTEGER}
	</foreach>)
  </update>
  
  <update id="updateChildProjectName" parameterType="java.util.Map">
    update link set project_name = #{projectName,jdbcType=VARCHAR} 
    where id in 
     (<foreach collection="linkIds" item="linkId" separator="," index="index">
		#{linkId,jdbcType=INTEGER}
	</foreach>)
  </update>
  
  <update id="invalid" parameterType="java.util.List">
    update link set state = -1
    where id in 
     (<foreach collection="list" item="linkId" separator="," index="index">
		#{linkId,jdbcType=INTEGER}
	</foreach>)
  </update>
  
</mapper>